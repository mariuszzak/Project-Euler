# Problem 12
# https://projecteuler.net/problem=12
#
# The sequence of triangle numbers is generated by adding 
# the natural numbers. So the 7th triangle number
#  would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
#  ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number
#  to have over five divisors.

# What is the value of the first triangle number
#  to have over five hundred divisors?

def factors(num)
  factors = []
  sqrt = Math.sqrt(num)
  until num == 1

    factor_founded = false
    (2..sqrt).each do |i|
      if (num % i).zero?
        num /= i
        factors << i
        factor_founded = true
        break
      end
    end
    unless factor_founded
      factors << num
      num /= num
    end
  end
  return factors
end

def dividors(num)
  dividors = {}
  factors = factors(num)
  factors.each do |i|
    dividors[i] ? dividors[i] += 1 : dividors[i] = 1
  end
  num_of_dividors = 1
  dividors.each_value do |v|
    num_of_dividors *= v+1
  end
  return num_of_dividors
end


sum = 1
max = 0
i = 2
while true
  sum += i
  dividors = dividors(sum)
  max = dividors if max < dividors
  if max >= 500
    puts sum
    break
  end
  i += 1
end

puts 'max: '+max.to_s